package gui_code;

import java.awt.EventQueue;

import javax.swing.JFrame;

import game_code.GameStats;
import game_code.Island;
import game_code.Ship;

import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.SwingConstants;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextArea;
import java.awt.Color;
import javax.swing.UIManager;

/**
 * The window to represent an island that the player is on
 * @author nzoli
 *
 */
public class IslandWindow {
	
	/**
	 * The current frame/window
	 * Automatically generated by WindowBuidler
	 */
	private JFrame frame;
	/**
	 * The island that the window is representing.
	 * This matters for things like displaying the name, as well as 
	 * giving other windows (like the shops) the correct island information
	 */
	private Island currentIsland;
	/**
	 * The manager instance that controls inter-window cohesion
	 */
	private UiManager manager;
	
	/**
	 * The player's ship
	 * Here for easier access of location and endurance data
	 */
	private Ship ship;
	
	/**
	 * String representation of the island's name for the text field.
	 */
	private String isleName;
	/**
	 * String representation of the current money count for the money text field.
	 */
	private String munCount;
	/**
	 * String representation of the time left for the time text field.
	 */
	private String timeCount;

	/**
	 * Launch the application.
	 * @param args Stores the Java command line arguments
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					IslandWindow window = new IslandWindow();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public IslandWindow() {
		initialize();
	}
	
	/**
	 * Modified constructor that is used in the manager
	 * @param incomingManager The UiManager instance that will be managing this window
	 * @param incomingIsland The Island object that this will be representing
	 */
	public IslandWindow(UiManager incomingManager, Island incomingIsland) {
		manager = incomingManager;
		currentIsland = incomingIsland;
		ship = manager.getEnviroment().getShip();
		getGameDetails();
		//Maybe have a money check here to see if you can afford to sail?
		initialize();
		frame.setVisible(true);
	}
	
	/**
	 * Gets the details for the game's text fields, such as money and time count, as well as island name.
	 */
	private void getGameDetails() {
		//Get the data
		GameStats stats = manager.getEnviroment().getStats();
		String islandName = currentIsland.getName();
		int money = stats.getMoney();
		double timeLeft = stats.getTimeLeft();
		//Now for string building
		String nameString = "Welcome to " + islandName + "!";
		String moneyString = "Money: " + money;
		String timeString = "Time Left: " + timeLeft + " Days";
		//Finally, change the text boxes.
		isleName = nameString;
		munCount = moneyString;
		timeCount = timeString;
	}
	
	/**
	 * Closes the window
	 */
	public void closeWindow() {
		frame.dispose();
	}
	
	/**
	 * Tells the manager to go to the view ship window
	 */
	public void inspectShip() {
		manager.inspectShip(this);
	}
	
	/**
	 * Tells the manager to go to the destination/route selection window
	 */
	public void settingSail() {
		manager.settingSail(this);
	}
	
	/**
	 * Tells the manager to go to the island viewing window
	 */
	public void viewIslands() {
		manager.viewIslands(this);
	}
	/**
	 * Tells the manager to go to the Buy things window
	 */
	public void goShopping() {
		manager.buyThings(this);
	}
	
	/**
	 * Tells the manager to go to the Sell things window
	 */
	public void sellThings( ) {
		manager.sellThings(this);
	}

	/**
	 * Initialize the contents of the frame.
	 * If it cannot get island parameters, then it will initialize with default names.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setResizable(false);
		frame.setBounds(100, 100, 900, 500);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JLabel islandNameLabel = new JLabel("Welcome to <Island name>!");
		if (isleName != null)
			islandNameLabel.setText(isleName);
		islandNameLabel.setHorizontalAlignment(SwingConstants.CENTER);
		islandNameLabel.setFont(new Font("Tahoma", Font.PLAIN, 20));
		islandNameLabel.setBounds(300, 45, 300, 60);
		frame.getContentPane().add(islandNameLabel);
		
		JLabel moneyCount = new JLabel("Money: <Money>");
		if (munCount != null)
			moneyCount.setText(munCount);
		moneyCount.setFont(new Font("Tahoma", Font.PLAIN, 17));
		moneyCount.setBounds(10, 11, 300, 30);
		frame.getContentPane().add(moneyCount);
		
		JLabel timeLeftLabel = new JLabel("Time Left: <Time> Days");
		if (timeCount != null)
			timeLeftLabel.setText(timeCount);
		timeLeftLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		timeLeftLabel.setBounds(650, 11, 226, 30);
		frame.getContentPane().add(timeLeftLabel);
		
		JButton viewShipButton = new JButton("View Ship");
		viewShipButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//Open up the shipView
				inspectShip();
			}
		});
		viewShipButton.setBounds(10, 109, 200, 70);
		frame.getContentPane().add(viewShipButton);
		
		JButton viewIslandsButton = new JButton("View Islands");
		viewIslandsButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				viewIslands();
			}
		});
		viewIslandsButton.setBounds(10, 190, 200, 70);
		frame.getContentPane().add(viewIslandsButton);
		
		JButton quitButton = new JButton("Quit");
		quitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//Open up a quit window
				QuitWindow wannaQuit = new QuitWindow(frame);
			}
		});
		quitButton.setFont(new Font("Tahoma", Font.PLAIN, 24));
		quitButton.setBounds(10, 402, 117, 50);
		frame.getContentPane().add(quitButton);
		
		JTextArea errorBox = new JTextArea();
		errorBox.setForeground(Color.BLACK);
		errorBox.setEditable(false);
		errorBox.setBackground(UIManager.getColor("EditorPane.disabledBackground"));
		errorBox.setBounds(503, 261, 373, 50);
		frame.getContentPane().add(errorBox);
		
		JButton sailButton = new JButton("Set Sail!");
		sailButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int endurance = ship.getEndurance();
				if (endurance > 0) {
					errorBox.setText("Your ship is damaged, and cannot sail!"
							+ "\nPlease view your ship to repair the damage.");
				} else {
					//We go to select an island
					settingSail();
				}
			}
		});
		sailButton.setFont(new Font("Tahoma", Font.PLAIN, 25));
		sailButton.setBounds(626, 322, 250, 130);
		frame.getContentPane().add(sailButton);
		
		JButton buyButton = new JButton("Buy Things");
		buyButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				goShopping();
			}
		});
		buyButton.setBounds(676, 109, 200, 70);
		frame.getContentPane().add(buyButton);
		
		JButton sellButton = new JButton("Sell Things");
		sellButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				sellThings();
			}
		});
		sellButton.setBounds(676, 190, 200, 70);
		frame.getContentPane().add(sellButton);
		

	}
}
